# This workflow performs tests in .NET.
name: Library net tests

on:
  workflow_call:
    inputs:
      dafny:
        description: 'The Dafny version to run'
        required: true
        type: string

jobs:
  testDotNet:
    strategy:
      matrix:
        library: [
          StandardLibrary,
          AwsCryptographyPrimitives,
          ComAmazonawsKms,
          ComAmazonawsDynamodb,
          AwsCryptographicMaterialProviders,
          TestVectorsAwsCryptographicMaterialProviders,
        ]
        dotnet-version: [ '6.0.x' ]
        os: [
          windows-latest,
          ubuntu-latest,
          macos-latest,
        ]
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
    steps:
      - name: Support longpaths on Git checkout
        run: |
          git config --global core.longpaths true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::370957321024:role/GitHub-CI-MPL-Dafny-Role-us-west-2
          role-session-name: NetTests

      - uses: actions/checkout@v4
      # The specification submodule is private so we don't have access, but we don't need
      # it to verify the Dafny code. Instead we manually pull the submodule we DO need.
      - run: git submodule update --init libraries

      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Setup Dafny
        uses: dafny-lang/setup-dafny-action@v1.6.1
        with:
          dafny-version: ${{ inputs.dafny }}

      - name: Download Dependencies 
        working-directory: ./${{ matrix.library }}
        run: make setup_net

      - name: Compile ${{ matrix.library }} implementation
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          # This works because `node` is installed by default on GHA runners
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_net CORES=$CORES

      # .NET Framework is only supported in Windows
      - name: Test ${{ matrix.library }} .NET Framework net48
        if: matrix.os == 'windows-latest'
        working-directory: ./${{ matrix.library }}
        shell: bash
        run: |
          make test_net FRAMEWORK=net48

      - name: Test ${{ matrix.library }} .NET net6.0
        working-directory: ./${{ matrix.library }}
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            make test_net_mac_intel FRAMEWORK=net6.0
          else
            make test_net FRAMEWORK=net6.0
          fi

      - name: Test Cache Thread Safety
        if: matrix.library == 'AwsCryptographicMaterialProviders'
        working-directory: ./${{ matrix.library }}
        shell: bash
        ## Run .NET 6.0 and .NET Framework net48
        run: |
          dotnet restore runtimes/net/tests/LocalCMC.Tests/
          dotnet build runtimes/net/tests/LocalCMC.Tests/
          dotnet test runtimes/net/tests/LocalCMC.Tests/ \
              --framework net6.0
          dotnet test runtimes/net/tests/LocalCMC.Tests/ \
              --framework net48